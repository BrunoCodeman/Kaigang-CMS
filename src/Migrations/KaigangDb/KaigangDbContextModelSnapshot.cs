// <auto-generated />
using System;
using Kaigang.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace kaigang.Migrations.KaigangDb
{
    [DbContext(typeof(KaigangDbContext))]
    partial class KaigangDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Kaigang.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Kaigang.Models.Entities.Page", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Kaigang.Models.Entities.Poll", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Options");

                    b.Property<Guid>("OwnedByID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OwnedByID");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Kaigang.Models.Entities.Post", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorID");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<bool>("IsDraft");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Tags")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Kaigang.Models.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<Guid?>("PollID");

                    b.HasKey("ID");

                    b.HasAlternateKey("Email");

                    b.HasIndex("PollID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kaigang.Models.Entities.Comment", b =>
                {
                    b.HasOne("Kaigang.Models.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kaigang.Models.Entities.Poll", b =>
                {
                    b.HasOne("Kaigang.Models.Entities.User", "OwnedBy")
                        .WithMany()
                        .HasForeignKey("OwnedByID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kaigang.Models.Entities.Post", b =>
                {
                    b.HasOne("Kaigang.Models.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kaigang.Models.Entities.User", b =>
                {
                    b.HasOne("Kaigang.Models.Entities.Poll")
                        .WithMany("Voters")
                        .HasForeignKey("PollID");
                });
#pragma warning restore 612, 618
        }
    }
}
